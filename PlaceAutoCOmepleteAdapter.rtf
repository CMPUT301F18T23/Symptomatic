{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red0\green116\blue0;\red14\green14\blue255;\red196\green26\blue22;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c0\c45600\c0;\csgenericrgb\c5500\c5500\c100000;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c11000\c0\c81000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab840
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf2 \cb3 package\cf4  ca.ualberta.symptomaticapp;
\f1\fs24 \cf0 \
\
\
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3 /*
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * Copyright (C) 2015 Google Inc. All Rights Reserved.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  Licensed under the Apache License, Version 2.0 (the "License");
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  you may not use this file except in compliance with the License.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  You may obtain a copy of the License at
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *      \cf6 \cb3 http://www.apache.org/licenses/LICENSE-2.0
\f1\fs24 \cf0 \

\f0\fs34 \cf5 \cb3  *
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  Unless required by applicable law or agreed to in writing, software
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  distributed under the License is distributed on an "AS IS" BASIS,
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  See the License for the specific language governing permissions and
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  *  limitations under the License.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  */
\f1\fs24 \cf0 \cb3 \
\
\
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf2 import\cf4  com.google.android.gms.common.api.GoogleApiClient;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.common.api.PendingResult;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.common.api.Status;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.common.data.DataBufferUtils;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.location.places.AutocompleteFilter;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.location.places.AutocompletePrediction;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.location.places.AutocompletePredictionBuffer;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.location.places.Places;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  com.google.android.gms.maps.model.LatLngBounds;
\f1\fs24 \cf0 \
\
\

\f0\fs34 \cf2 import\cf4  android.content.Context;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.graphics.Typeface;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.text.style.CharacterStyle;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.text.style.StyleSpan;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.util.Log;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.view.View;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.view.ViewGroup;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.widget.ArrayAdapter;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.widget.Filter;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.widget.Filterable;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.widget.TextView;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  android.widget.Toast;
\f1\fs24 \cf0 \
\

\f0\fs34 \cf2 import\cf4  java.util.ArrayList;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  java.util.Iterator;
\f1\fs24 \cf0 \

\f0\fs34 \cf2 import\cf4  java.util.concurrent.TimeUnit;
\f1\fs24 \cf0 \
\
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * Adapter that handles Autocomplete requests from the Places Geo Data API.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * \{
\f2\b \cf5 \cb3 @link
\f0\b0 \cf5 \cb3  AutocompletePrediction\} results from the API are frozen and stored directly in this
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * adapter. (See \{
\f2\b \cf5 \cb3 @link
\f0\b0 \cf5 \cb3  AutocompletePrediction#freeze()\}.)
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * <p>
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * Note that this adapter requires a valid \{
\f2\b \cf5 \cb3 @link
\f0\b0 \cf5 \cb3  com.google.android.gms.common.api.GoogleApiClient\}.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * The API client must be maintained in the encapsulating Activity, including all lifecycle and
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  * connection states. The API client must be connected with the \{
\f2\b \cf5 \cb3 @link
\f0\b0 \cf5 \cb3  Places#GEO_DATA_API\} API.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3  */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf2 public\cf4  \cf2 class\cf4  PlaceAutocompleteAdapter
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 extends\cf4  ArrayAdapter<AutocompletePrediction> \cf2 implements\cf4  Filterable \{
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf2 private\cf4  \cf2 static\cf4  \cf2 final\cf4  String TAG = \cf7 "PlaceAutoCompleteAd"\cf4 ;
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \cf2 private\cf4  \cf2 static\cf4  \cf2 final\cf4  CharacterStyle STYLE_BOLD = \cf2 new\cf4  StyleSpan(Typeface.BOLD);
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Current results returned by this adapter.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 private\cf4  ArrayList<AutocompletePrediction> mResultList;
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Handles autocomplete requests.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 private\cf4  GoogleApiClient mGoogleApiClient;
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * The bounds used for Places Geo Data autocomplete API requests.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 private\cf4  LatLngBounds mBounds;
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * The autocomplete filter used to restrict queries to a specific set of place types.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 private\cf4  AutocompleteFilter mPlaceFilter;
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Initializes with a resource for text rows and autocomplete query bounds.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      *
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * 
\f2\b \cf5 \cb3 @see
\f0\b0 \cf5 \cb3  android.widget.ArrayAdapter#ArrayAdapter(android.content.Context, int)
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 public\cf4  PlaceAutocompleteAdapter(Context context, GoogleApiClient googleApiClient,
\f1\fs24 \cf0 \

\f0\fs34 \cf4                                     LatLngBounds bounds, AutocompleteFilter filter) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 super\cf4 (context, android.R.layout.simple_expandable_list_item_2, android.R.id.text1);
\f1\fs24 \cf0 \

\f0\fs34 \cf4         mGoogleApiClient = googleApiClient;
\f1\fs24 \cf0 \

\f0\fs34 \cf4         mBounds = bounds;
\f1\fs24 \cf0 \

\f0\fs34 \cf4         mPlaceFilter = filter;
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Sets the bounds for all subsequent queries.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 public\cf4  \cf2 void\cf4  setBounds(LatLngBounds bounds) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         mBounds = bounds;
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Returns the number of results received in the last autocomplete query.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \cf2 public\cf4  \cf2 int\cf4  getCount() \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 return\cf4  mResultList.size();
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Returns an item from the last autocomplete query.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \cf2 public\cf4  AutocompletePrediction getItem(\cf2 int\cf4  position) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 return\cf4  mResultList.get(position);
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \cf2 public\cf4  View getView(\cf2 int\cf4  position, View convertView, ViewGroup parent) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         View row = \cf2 super\cf4 .getView(position, convertView, parent);
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4         \cf5 \cb3 // Sets the primary and secondary text for a row.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4         \cf5 \cb3 // Note that getPrimaryText() and getSecondaryText() return a CharSequence that may contain
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4         \cf5 \cb3 // styling based on the given CharacterStyle.
\f1\fs24 \cf0 \cb3 \
\

\f0\fs34 \cf4         AutocompletePrediction item = getItem(position);
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4         TextView textView1 = (TextView) row.findViewById(android.R.id.text1);
\f1\fs24 \cf0 \

\f0\fs34 \cf4         TextView textView2 = (TextView) row.findViewById(android.R.id.text2);
\f1\fs24 \cf0 \

\f0\fs34 \cf4         textView1.setText(item.getPrimaryText(STYLE_BOLD));
\f1\fs24 \cf0 \

\f0\fs34 \cf4         textView2.setText(item.getSecondaryText(STYLE_BOLD));
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4         \cf2 return\cf4  row;
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Returns the filter for the current set of autocomplete results.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \cf2 public\cf4  Filter getFilter() \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 return\cf4  \cf2 new\cf4  Filter() \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4             @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \cf2 protected\cf4  FilterResults performFiltering(CharSequence constraint) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 FilterResults results = \cf2 new\cf4  FilterResults();
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4                 \cf5 \cb3 // We need a separate list to store the results, since
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                 \cf5 \cb3 // this is run asynchronously.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                 ArrayList<AutocompletePrediction> filterData = \cf2 new\cf4  ArrayList<>();
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4                 \cf5 \cb3 // Skip the autocomplete query if no constraints are given.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                 \cf2 if\cf4  (constraint != \cf2 null\cf4 ) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     \cf5 \cb3 // Query the autocomplete API for the (constraint) search string.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                     filterData = getAutocomplete(constraint);
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4                 results.values = filterData;
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \cf2 if\cf4  (filterData != \cf2 null\cf4 ) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     results.count = filterData.size();
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \} \cf2 else\cf4  \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     results.count = \cf8 \cb3 0\cf4 \cb3 ;
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4                 \cf2 return\cf4  results;
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \cf2 protected\cf4  \cf2 void\cf4  publishResults(CharSequence constraint, FilterResults results) \{
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4                 \cf2 if\cf4  (results != \cf2 null\cf4  && results.count > \cf8 \cb3 0\cf4 \cb3 ) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     \cf5 \cb3 // The API returned at least one result, update the data.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                     mResultList = (ArrayList<AutocompletePrediction>) results.values;
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     notifyDataSetChanged();
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \} \cf2 else\cf4  \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     \cf5 \cb3 // The API did not return any results, invalidate the data set.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                     notifyDataSetInvalidated();
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \}
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             @Override
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \cf2 public\cf4  CharSequence convertResultToString(Object resultValue) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \cf5 \cb3 // Override this method to display a readable result in the AutocompleteTextView
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                 \cf5 \cb3 // when clicked.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4                 \cf2 if\cf4  (resultValue \cf2 instanceof\cf4  AutocompletePrediction) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     \cf2 return\cf4  ((AutocompletePrediction) resultValue).getFullText(\cf2 null\cf4 );
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \} \cf2 else\cf4  \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     \cf2 return\cf4  \cf2 super\cf4 .convertResultToString(resultValue);
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \}
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \}
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \};
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4     \cf5 \cb3 /**
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf5 \cb3      * Submits an autocomplete query to the Places Geo Data Autocomplete API.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * Results are returned as frozen AutocompletePrediction objects, ready to be cached.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * objects to store the Place ID and description that the API returns.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * Returns an empty list if no results were found.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * Returns null if the API client is not available or the query did not complete
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * successfully.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * This method MUST be called off the main UI thread, as it will block until data is returned
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * from the API, which may include a network request.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      *
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * 
\f2\b \cf5 \cb3 @param
\f0\b0 \cf5 \cb3  constraint Autocomplete query string
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * 
\f2\b \cf5 \cb3 @return
\f0\b0 \cf5 \cb3  Results from the autocomplete API or null if the query was not successful.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * 
\f2\b \cf5 \cb3 @see
\f0\b0 \cf5 \cb3  Places#GEO_DATA_API#getAutocomplete(CharSequence)
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      * 
\f2\b \cf5 \cb3 @see
\f0\b0 \cf5 \cb3  AutocompletePrediction#freeze()
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf5 \cb3      */
\f1\fs24 \cf0 \cb3 \
\pard\tx840\pardeftab840\pardirnatural\partightenfactor0

\f0\fs34 \cf4     \cf2 private\cf4  ArrayList<AutocompletePrediction> getAutocomplete(CharSequence constraint) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 if\cf4  (mGoogleApiClient.isConnected()) \{
\f1\fs24 \cf0 \

\f0\fs34 \cf4             Log.i(TAG, \cf7 "Starting autocomplete query for: "\cf4  + constraint);
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             \cf5 \cb3 // Submit the query to the autocomplete API and retrieve a PendingResult that will
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4             \cf5 \cb3 // contain the results when the query completes.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4             PendingResult<AutocompletePredictionBuffer> results =
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     Places.GeoDataApi
\f1\fs24 \cf0 \

\f0\fs34 \cf4                             .getAutocompletePredictions(mGoogleApiClient, constraint.toString(),
\f1\fs24 \cf0 \

\f0\fs34 \cf4                                     mBounds, mPlaceFilter);
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             \cf5 \cb3 // This method should have been called off the main UI thread. Block and wait for at most 60s
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4             \cf5 \cb3 // for a result from the API.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4             AutocompletePredictionBuffer autocompletePredictions = results
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     .await(\cf8 \cb3 60\cf4 \cb3 , TimeUnit.SECONDS);
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             \cf5 \cb3 // Confirm that the query completed successfully, otherwise return null
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4             \cf2 final\cf4  Status status = autocompletePredictions.getStatus();
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \cf2 if\cf4  (!status.isSuccess()) \{
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4                 Log.e(TAG, \cf7 "Error getting autocomplete prediction API call: "\cf4  + status.toString());
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 autocompletePredictions.release();
\f1\fs24 \cf0 \

\f0\fs34 \cf4                 \cf2 return\cf4  \cf2 null\cf4 ;
\f1\fs24 \cf0 \

\f0\fs34 \cf4             \}
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             Log.i(TAG, \cf7 "Query completed. Received "\cf4  + autocompletePredictions.getCount()
\f1\fs24 \cf0 \

\f0\fs34 \cf4                     + \cf7 " predictions."\cf4 );
\f1\fs24 \cf0 \
\

\f0\fs34 \cf4             \cf5 \cb3 // Freeze the results immutable representation that can be stored safely.
\f1\fs24 \cf0 \cb3 \

\f0\fs34 \cf4             \cf2 return\cf4  DataBufferUtils.freezeAndClose(autocompletePredictions);
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \}
\f1\fs24 \cf0 \

\f0\fs34 \cf4         Log.e(TAG, \cf7 "Google API client is not connected for autocomplete query."\cf4 );
\f1\fs24 \cf0 \

\f0\fs34 \cf4         \cf2 return\cf4  \cf2 null\cf4 ;
\f1\fs24 \cf0 \

\f0\fs34 \cf4     \}
\f1\fs24 \cf0 \
\
\

\f0\fs34 \cf4 \}
\f1\fs24 \cf0 \
}